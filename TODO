SERVER TODO:
[x] set up db
[x] set up CRUD
  [x] set up user model
  [x] seed DB
    [x] CREATE user (insert into db)
      [x] validation
        [x] no same users
    [x] READ users (display all users from db)
    [x] UPDATE users (change user info)
      [x] validation
        [x] no same users
    [x] DELETE users from db
      [] validation? => require user to enter password to delete. see if matches


CLIENT TODO:
[x] set up redux
[x] set up react router
[x] set up reactstrap
[x] set up new user registration form
  [x] set up valid/invalid messages based on error from backend?
  [x] check if it added new users to db
  [] don't store password in cleartext
[x] login/logout feature
[x] update validation to make sure passwords dont contain special chars
[x] update validation to not allow white space
[] make sure password is not in cleartext (hash, salt)
[x] make axios request to backend and handle error/insert dB


Refactor tasks:
[x] set up res and status code on errors server side (CRUD files)
[x] userCrud.js handle all catch (in try catch)
[x] fix CRUD response
[x] fix response on successful CRUD (userCRUD.js)
[x] fix username and password regex (special chars, _, -, etc);

Bugs:
[x] username/password shouldn't have white space


Notes:
[x] use error obj e.g. { error : { email: "Must be valid", password: "Does not match" } }
[x] forms - server side validation AND server side validation

Current task:
[x] validation to prevent create/update same username or email
[x] refactor: fix CRUD response
[x] client side: set up new user registration form
[x] user validation client side
[x] make axios request to backend and handle error/insert dB
[x] login/logout feature
[]  usebcrypt to hash and salt passwords

  [] new register page -> redirect to login page -> login page enter username and password -> check DB if there, return JWT token :)