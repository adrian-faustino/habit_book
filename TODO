SERVER TODO:
[x] set up db

  Users:
[x] set up CRUD
  [x] set up user model
  [x] seed DB
    [x] CREATE user (insert into db)
      [x] validation
        [x] no same users
    [x] READ users (display all users from db)
    [x] UPDATE users (change user info)
      [x] validation
        [x] no same users
    [x] DELETE users from db
      [x] validation? => require user to enter password to delete. see if matches

  Habits:
[x] habit crud routes
  [x] create habit
  [x] read habit
  [x] update habit (show is edited)
  [x] delete habit
  [x] habit validation before submission
  [x] validation:
    [x] no empty title
    [x] no empty desc
  [x] list all Habits /habits
  [x] list a user's own Habits /habits/:userID
  [x] post a new habit
  [x] update habit
  [x] delete habit
    [x] auth (make sure only logged in user can delete their OWN habits)
[] add a limit to requests (pagination? inf scroll etc)


  completed_at: (habit)
  [] crud routes
    [x] create (when clicking calendar)
    [x] read (fetch all)
    [] update (might need this when determining if completed at was marked at that day)
    [x] delete (unmarking)
  [x] protect route

  Search users:
    [] crud routes
      [x] read - return all users that match given params
      [] add limit (pagination?)

  Like button:
  [x] create and seed likes table

  Comments:
    [x] create comments table and seed

=========================================================================

CLIENT TODO:
  Users:
[x] set up redux
[x] set up react router
[x] set up reactstrap
[x] set up new user registration form
  [x] set up valid/invalid messages based on error from backend?
  [x] check if it added new users to db
  [x] don't store password in cleartext
[x] login/logout feature
[x] update validation to make sure passwords dont contain special chars
[x] update validation to not allow white space
[x] make sure password is not in cleartext (hash, salt)
[x] make axios request to backend and handle error/insert dB

  Habits:
[x] habit cards to display user habits (component)
  [x] format created at to proper date
  [x] implement calendar like on github
  [x] implement like and commment button
    [x] display total likes 
    [x] display comments
  [x] implement "check" (completed today) button

      Habits - calendar
        [x] Highlight range of dates (to show successful days)
          [x] set up compelted_at table
          [x] seed compelted_at table for user 19
          [x] get list of completed days for user 19
          [x] write functions to extract data from that array
        [x] refresh displayed when new habit is added or when its deleted

  Calendar:
  [x] on click -> post req to create an entry in created_at
  [] refactor calendar component (clean up functions and modularize. Fix TODO#2)

  Search users 'Search page'
  [x] user types in name
    [x] display all users with that name
    [x] display all users with that email
    [x] display all users with that username
    [x] on click, take user to that user's page

  Likes:
    [x] plural formatting 1 like -> 2 likes
    [x] remove likes when user already liked content
    [x] remove likes on delete of any habit
    [x] display random users for users to 'explore'

  Comments
    [x] write comments on a post
    [x] display comments on a post
    [x] display user info of each comment
    [x] time since comment was made (like fb)
    [x] username on click, link to user's profile
    [x] delete comments

  User Experience:
    [x] when visiting someone's profile, have feedback when they don't have any habits
    [] have a 'longest streak' of habits etc
    [] on each habit card, display longest streak

  SECTION: My following
  [x] on each user card, have a follow button
  [x] display list of users you follow

Refactor tasks:
[x] set up res and status code on errors server side (CRUD files)
[x] userCrud.js handle all catch (in try catch)
[x] fix CRUD response
[x] fix response on successful CRUD (userCRUD.js)
[x] fix username and password regex (special chars, _, -, etc);
[] clean up React imports, comment (for consistency)
[x] refresh page after all CRUD? (to show most updated version from DB)
[x] when deleting a habit, delete all completed_at entries related to it
[x] no dates in the future can be clicked for completed_at
[x] add feedback when searching for users
[x] user card on hover (over avatar, over full name)
[x] set created_at on server side with GETDATE() SQL?
[] add loading spinners where there is a request
[] fix x minutes ago going over 60 mintes (i.e. 100 minutes ago)
[x] add 'comment deleted' placeholder after deleting comment
[x] dont allow others to edit other users completed days ** IMPORTANT
[] debounce mouse clicks (like on calendar, follow, like btn etc)
[x] have an offset class that offsets all the view by the nav bar height (apply it to sign up page, register page, home page, etc)
[] feedback when trying to log in with a non existing account
[] clean up how comments button is being written (close comments, view x comments etc);
[] have a separate constant file for SQL queries like get user, get followers etc on a separate JS file

Bugs:
[x] username/password shouldn't have white space
[x] when user marks days complete too fast, styling isnt applied (disabled until adding new completed_at is completed?)
[x] '_' is counting towards char count (wrong error message displayed in registration form)
[x] user search (make it case insensistive)
[x] deal with TODO #1 (search file for this comment)
[x] include time in db? new habits being posted but since they are being sorted by day and not time, it's not accurate
[x] bug when creating new account (cannot split null when getting created_at for user)
[] when clicking like, it triggers a view change on comments

Notes:
[x] use error obj e.g. { error : { email: "Must be valid", password: "Does not match" } }
[x] forms - server side validation AND server side validation

Current task: (I set these when I end the night, to remind myself in the morning)
[x] validation to prevent create/update same username or email
[x] refactor: fix CRUD response
[x] client side: set up new user registration form
[x] user validation client side
[x] make axios request to backend and handle error/insert dB
[x] login/logout feature
[x]  usebcrypt to hash and salt passwords
  [x] new register page -> redirect to login page -> login page enter username and password -> check DB if there, return JWT token :)
[x] habit crud routes
  [x] create habit
  [x] read habit
  [x] update habit (edit)
  [x] delete habit
[x] habit cards to display user habits
  [x] learn about children props
[x] auth (make sure only logged in user can delete their OWN habits) 
[x] refresh displayed when new habit is added or when its deleted
[x] when user clicks current day, update DB 
  [x] set compeleted_at
  [x] trigger update 

[x] habit card form feedback
  [x] when user marks a day complete
  [x] err feedback when user tries to set a day in the future

Search users 'Search page'
  [x] user types in name
    [x] display all users with that name
    [x] display all users with that email
    [x] display all users with that username

[x] Display other user's profile
[x] Display total likes 
  [x] display each habit's likes
  [x] like button functionality (create habit_like)
  [x] when deleting habit, make sure to delete all the likes associated with it
  [x] trigger update when likes when clicked

Comments
  [x] write comments on a post
  [x] display comments on a post
  [x] delete comments
  [x] user autnh
  [x] add delete confirmation
  [] edit comments
    [] validate route
    [] show error messages
    [x] show (edited)
    [x] update (edited) in db

[x] allow user to update habit
  [x] change db to indicate if habit has been edited
  [x] indicator if habit is edited


  [x] updating new habits  
    [x] validate habits client side
    [x] validate habits server side
    [x] update habit
      [x] set error messages 
      [x] set success messages

[x] refactor DO TODO #2
[x] if logged in and on welcome page, do not show log in/ registration forms
[x] refresh button on find user page to refresh list of random users
[x] indicate if you liked a habit
[x] view 'x' comments

follow user:
[x] display a list of people you follow
[x] display a list of people who follow you  
  [] on user cards, when you click 'followers' link to ^
  [x] if no one follows you, have 
  
[x] user profile
  [x] have a tab to select if you want to view a user's followers, following, habits